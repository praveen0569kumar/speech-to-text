
export const data1 = {
    "What is React.js? Why is it used?": "React.js is a JavaScript library developed by Facebook for building user interfaces, especially for single-page applications. It allows developers to create reusable UI components and manage the dynamic data of web applications efficiently. React is known for its high performance, scalability, and ability to create modern, interactive user interfaces. It is widely used because of its component-based architecture and Virtual DOM, which enable faster rendering and better user experience.",
    "What are the major features of React?": 
        `"JSX (JavaScript XML): A syntax extension for JavaScript that allows developers to write HTML-like code in JavaScript.",
        "Virtual DOM: A lightweight representation of the actual DOM that optimizes updates.",
        "Component-based architecture: Reusable, modular components make code easier to manage and scale.",
        "Unidirectional data flow: Data flows in a single direction, making it predictable and easy to debug.",
        "React Hooks: Introduced in React 16.8, Hooks allow functional components to use state and lifecycle features.",
        "High performance through reconciliation: React efficiently updates and renders only the components that have changed."`
    ,
    "What is the Virtual DOM, and how does it work in React?": "The Virtual DOM is a lightweight, in-memory copy of the real DOM. When the state of a component changes, React updates the Virtual DOM first. It calculates the difference between the current Virtual DOM and the previous version (diffing) and then identifies the minimum set of changes needed to update the real DOM efficiently.",
    "What is JSX, and why is it used?": "JSX (JavaScript XML) is a syntax extension for JavaScript that allows developers to write HTML-like code directly within JavaScript. It makes the code easier to read and write and allows embedding of dynamic data and logic directly within the UI structure.",
    "Explain the difference between functional and class components.": 
        `"Functional Components": "Defined as plain JavaScript functions. Initially stateless but can manage state and side effects using React Hooks.",
        "Class Components": "Defined as ES6 classes. Include state and lifecycle methods by default."
    `,
    "What are props in React? How are they different from state?": `
        "Props": "Props (short for properties) are used to pass data from a parent component to a child component. They are immutable (cannot be modified by the receiving component).",
        "State": "State is managed internally by a component and is mutable, meaning it can be updated using methods like setState or useState."
    `,
    "What is the purpose of the key attribute in React lists?": "The key attribute is used in lists to uniquely identify elements. This helps React track which items have changed, been added, or removed, optimizing the re-rendering process for better performance.",
    "What are fragments in React? Why are they used?": "Fragments allow developers to group multiple elements without adding an extra DOM node. They are particularly useful when a component needs to return multiple children.",
    "Explain the React lifecycle methods (used in class components).": `
        "Mounting": "componentDidMount: Executes after the component is rendered.",
        "Updating": "componentDidUpdate: Executes after the component is updated.",
        "Unmounting": "componentWillUnmount: Executes before the component is destroyed.",
        "Error Handling": "componentDidCatch: Handles errors in child components."
    `,
    "How does React handle events differently than vanilla JavaScript?": "React uses Synthetic Events, which are cross-browser wrappers around native events. These synthetic events provide consistent behavior across browsers and use a single event listener on the root element for better performance.",
    "What is the purpose of React hooks? Name a few commonly used hooks.": `
        "Purpose": "React Hooks allow functional components to use state, lifecycle, and other features without converting to class components.",
        "Common Hooks": ["useState", "useEffect", "useContext", "useReducer", "useRef"]
    `,
    "How do useState and useEffect work? Provide examples.": `
        "useState": "Initializes and updates state in functional components. Example: const [count, setCount] = useState(0);",
        "useEffect": "Runs side effects like data fetching or DOM updates. Example: useEffect(() => { document.title = Count: ${"count"}; }, [count]);"
    `,
    "What is the difference between useMemo and useCallback?": `"useMemo": "Memoizes the result of a function to prevent unnecessary recalculations.",
        "useCallback": "Memoizes the function itself to prevent re-creation on re-renders."`,

    "Explain the Context API and how it helps in state management.": "The Context API is a feature in React that provides a way to share state across the component tree without the need to pass props manually at every level. By creating a context object using React.createContext, you can define a global state. A provider component wraps the part of the application where the state is needed, making it available to any descendant component via the useContext hook or a Context.Consumer. This simplifies managing global state and is particularly useful for themes, authentication, or language settings.",
    "What is Redux, and how is it integrated with React?": "Redux is a predictable state management library that centralizes the state of an application. It uses a single store to hold the application state and defines how the state is updated using actions and reducers. Integration with React is achieved through the react-redux library, which provides a Provider component to make the Redux store accessible to the app, and hooks like useSelector for reading state and useDispatch for dispatching actions. Redux is particularly useful for managing complex state in large applications.",
    "What are higher-order components (HOCs), and when would you use them?": "Higher-order components (HOCs) are functions that take a component as an argument and return a new enhanced component. They are used to add additional behavior or logic to existing components without modifying their code. Common use cases include handling authentication, logging, theming, and reusing stateful logic across multiple components. Example: A withAuth HOC could wrap a component to provide user authentication logic.",
    "Explain the difference between controlled and uncontrolled components.": "Controlled components have their value or state fully controlled by React. For example, an input field's value is tied to a state variable and updated using an onChange handler. In contrast, uncontrolled components rely on the DOM for their state management, and values are accessed using refs. Controlled components offer better control and are suitable for most use cases, while uncontrolled components can simplify code for less complex scenarios.",
    "What are React portals, and when should they be used?": "React portals allow you to render children into a DOM node that exists outside the DOM hierarchy of the parent component. This is useful for UI elements like modals, tooltips, or dropdowns where breaking out of the parent hierarchy is necessary to avoid issues like CSS overflow or z-index conflicts. Portals are created using ReactDOM.createPortal(children, targetNode).",
    "How does React optimize performance with reconciliation?": "React's reconciliation algorithm optimizes performance by using a Virtual DOM, which is an in-memory representation of the real DOM. When changes occur, React compares the new Virtual DOM with the previous one to calculate the minimal set of updates needed (diffing). These updates are then efficiently applied to the real DOM, reducing unnecessary re-renders and improving performance.",
    "What are the benefits and drawbacks of using React.lazy and Suspense?": "React.lazy and Suspense enable code splitting and lazy loading of components. This improves performance by loading only the required code when needed. Benefits include reduced initial load time and improved user experience. However, they require fallback components for loading states and do not support server-side rendering (SSR), limiting their use in SSR-based applications.",
    "What is React Router, and why is it used?": "React Router is a library that enables navigation between different views or pages in a React application without a full-page reload. It uses the History API for clean URLs and allows dynamic rendering of components based on the current route. React Router is essential for creating single-page applications (SPAs) that require seamless navigation.",
    "Explain the difference between <BrowserRouter> and <HashRouter>.": "<BrowserRouter> uses the History API to create clean and human-readable URLs without hashes. It is ideal for modern web applications but requires server configuration to handle routes. <HashRouter> uses a hash (#) in the URL to maintain state, making it suitable for environments where server configuration is not possible, such as GitHub Pages.",
    "How do you implement dynamic routing in React?": "Dynamic routing can be implemented using the useParams hook provided by React Router. For example, if you have a route defined as '/user/:id', you can access the 'id' parameter in the component like this: const { id } = useParams();. This allows you to display or fetch data based on the dynamic route parameter.",
    "What is the difference between useNavigate and useHistory in React Router?": "useNavigate is a hook introduced in React Router v6 that replaces useHistory. It is used for programmatically navigating between routes. For example, navigate('/home') redirects to the home route. useHistory was used in earlier versions of React Router for the same purpose but has been deprecated in favor of useNavigate.",
    "How do you implement route guards in React?": "Route guards can be implemented using conditional rendering with the Navigate component from React Router. For example, you can check if a user is authenticated and render a protected component or redirect them to a login page: const isAuthenticated = true; return isAuthenticated ? <ProtectedComponent /> : <Navigate to='/login' />.",
    "What is the difference between local state and global state?": "Local state is specific to a single component and managed internally using hooks like useState. Global state is shared across multiple components and managed using tools like the Context API, Redux, or other state management libraries. Local state is suitable for individual component needs, while global state is necessary for managing data shared across the app.",
    "How does the Context API differ from Redux?": "The Context API is a simpler, built-in solution in React for sharing state across components. It is ideal for smaller applications or scenarios where minimal state management is needed. Redux is a more robust, feature-rich library that provides a central store, middleware support, and tools like the Redux DevTools, making it better suited for large and complex applications.",
    "Explain the Redux data flow (actions, reducers, and store).": "Redux follows a unidirectional data flow. Actions are plain objects that describe the type of change needed in the state. Reducers are pure functions that take the current state and an action as inputs and return a new state. The store is the central repository that holds the entire application state. Components interact with Redux by dispatching actions to update the store and subscribing to store updates to render the updated state.",
    "What is the purpose of useReducer, and how is it different from useState?": "useReducer is a React hook used for managing state with complex logic or multiple actions. It works similarly to reducers in Redux by defining a state and action-based update logic. In contrast, useState is simpler and better for straightforward state updates. useReducer is suitable for scenarios where the state depends on multiple sub-values or actions.",
    "How do you handle asynchronous actions in Redux?": "Asynchronous actions in Redux are handled using middleware like redux-thunk or redux-saga. redux-thunk allows action creators to return functions instead of plain objects, enabling asynchronous operations like API calls. redux-saga uses generator functions to handle side effects in a more declarative manner, making it easier to manage complex asynchronous workflows.",

    "How do you test a React component?": "Testing React components involves using tools like Jest for unit tests and React Testing Library for testing UI interactions. These tools allow you to simulate user behavior, test component outputs, and ensure the application works as expected.",
    "What is the purpose of Jest and React Testing Library?": "Jest is a testing framework used for writing and running tests. It provides features like mocking, test coverage reports, and snapshot testing. React Testing Library is designed to test UI components by interacting with them the way users would, focusing on accessible queries and behavior rather than implementation details.",
    "How do you simulate user interactions in a test case?": "To simulate user interactions, you can use React Testing Library’s 'fireEvent' or 'userEvent'. For example, to simulate a click, you can use fireEvent.click(element) or userEvent.click(element). These utilities mimic user behavior like typing, clicking, and hovering over elements.",
    "Explain snapshot testing in React.": "Snapshot testing captures a component's rendered output at a specific time and compares it to a saved snapshot file. If the component's output changes unexpectedly, the test fails, alerting developers to potential issues.",
    "What are mock functions, and why are they used in testing React apps?": "Mock functions simulate external dependencies like APIs or libraries. They allow developers to isolate and test the behavior of a React component without relying on real implementations, ensuring predictable and faster tests.",
    "What are some common performance bottlenecks in React applications?": "Performance bottlenecks include unnecessary re-renders, large bundle sizes, inefficient state management, and excessive use of third-party libraries.",
    "How does React.memo work, and when should it be used?": "React.memo is a higher-order component that prevents a functional component from re-rendering if its props haven't changed. It is used for optimizing performance by reducing unnecessary re-renders.",
    "What are the benefits of lazy loading components in React?": "Lazy loading improves performance by splitting the application into smaller bundles and loading components only when needed. This reduces the initial load time and enhances the user experience, especially in large applications.",
    "Explain how shouldComponentUpdate works in class components.": "shouldComponentUpdate is a lifecycle method in class components that determines whether a component should re-render. It compares the current props and state with the next ones and returns true (re-render) or false (skip re-render).",
    "What is the difference between HTML5 and previous versions of HTML?": "HTML5 introduced semantic elements (<article>, <section>, <nav>, <aside>), multimedia support (audio and video tags), new APIs (localStorage, WebSockets), and improved form controls. It also deprecated older elements like <font> and focused on cleaner, more accessible code.",
    "How do you optimize the performance of a web page using HTML?": "Optimize web page performance by minifying HTML, using the async or defer attributes for scripts, optimizing image sizes, reducing HTTP requests, and leveraging browser caching.",
    "Explain the concept of ARIA (Accessible Rich Internet Applications) in HTML.": "ARIA provides attributes to enhance the accessibility of web applications for users with disabilities. It includes roles (e.g., 'button', 'alert') and properties (e.g., 'aria-label', 'aria-hidden') that make web content more understandable to assistive technologies.",
    "What are the differences between relative, absolute, fixed, and sticky positioning in CSS?": "Relative positioning offsets an element relative to its normal position. Absolute positions it relative to the nearest positioned ancestor. Fixed positions it relative to the viewport, and sticky toggles between relative and fixed based on the scroll position.",
    "What is the difference between 'em', 'rem', 'px', and '%' units in CSS?": "'em' is relative to the font size of the parent element, 'rem' is relative to the root element's font size, 'px' is an absolute unit, and '%' is relative to the parent element's dimensions.",
    "What are CSS preprocessors? Name some popular ones.": "CSS preprocessors, like Sass, LESS, and Stylus, extend CSS by adding features like variables, nested rules, and functions, making it more maintainable and reusable.",
    "Explain the CSS box model and its components.": "The CSS box model consists of the content (inner part of the box), padding (space between content and border), border (encloses padding and content), and margin (space between elements).",
    "What are custom data attributes in HTML, and how are they used?": "Custom data attributes, prefixed with 'data-', store custom data on HTML elements. For example, <div data-id='123'></div>. They can be accessed via JavaScript using 'element.dataset'.",
    "What is the difference between 'inline', 'block', 'inline-block', and 'flex' in CSS?": "'Inline' elements flow within text and do not start on a new line. 'Block' elements start on a new line and take up the full width. 'Inline-block' elements behave like inline elements but allow width and height. 'Flex' allows flexible item arrangement within a container.",
    "What are pseudo-classes and pseudo-elements in CSS? Provide examples.": "Pseudo-classes define element states (:hover, :nth-child()). Pseudo-elements style parts of an element (::before, ::after). Example: p::first-line.",
    "What is the difference between 'visibility: hidden' and 'display: none'?": "'Visibility: hidden' hides the element but retains its layout space. 'Display: none' removes the element from the document flow.",
    "What is a CSS grid, and how does it differ from Flexbox?": "CSS Grid is a two-dimensional layout system for managing rows and columns, while Flexbox is one-dimensional and manages rows or columns.",
    "What are Web Components, and how are they implemented?": "Web Components are reusable, encapsulated HTML, CSS, and JavaScript elements implemented using Shadow DOM, Custom Elements, and HTML templates.",
    "How does the <meta> tag work in HTML?": "<meta> provides metadata about an HTML document, such as charset, viewport settings, and SEO-related information like description and keywords.",
    "What are the new input types introduced in HTML5?": "HTML5 introduced input types like 'email', 'url', 'number', 'range', 'date', 'color', and 'search' for better form validation and user interaction.",
    "What is the difference between SVG and Canvas in HTML?": "SVG is XML-based for scalable vector graphics and is resolution-independent. Canvas is pixel-based, suitable for dynamic and interactive graphics like games.",
    "How do you handle responsive images in HTML?": "Responsive images in HTML can be handled using the <picture> element, the 'srcset' attribute on the <img> tag, or CSS media queries. The <picture> element allows you to specify multiple source images for different device conditions, while 'srcset' provides different image options for varying resolutions or sizes. CSS media queries can adjust background images or styles dynamically based on screen dimensions.",
    "What are custom elements in HTML, and how are they created?": "Custom elements are user-defined HTML elements created using JavaScript. They are implemented using the Custom Elements API. A custom element is defined by extending HTMLElement or its subclasses, registering it with a unique tag name via customElements.define(), and optionally including encapsulation using Shadow DOM to create a private, scoped DOM for the component.",
    "How do you handle responsive images in HTML?": "Responsive images adapt to different screen sizes or resolutions. There are three main ways to implement responsive images: 1. <picture> element: Allows you to define multiple image sources for different conditions using <source> tags. Example: <picture><source srcset='image-large.jpg' media='(min-width: 800px)'><source srcset='image-medium.jpg' media='(min-width: 400px)'><img src='image-small.jpg' alt='Responsive example'></picture> 2. srcset attribute: Defines multiple image resolutions for an <img> tag. Example: <img src='image-small.jpg' srcset='image-medium.jpg 2x, image-large.jpg 3x' alt='Responsive image'> 3. CSS media queries: Use CSS to load different background images based on the screen size. Example: @media (min-width: 800px) {.example { background-image: url('image-large.jpg'); }}",

    "What are custom elements in HTML, and how are they created?": "Custom elements are user-defined HTML tags that extend the standard HTML vocabulary. They are defined using the Custom Elements API and can encapsulate functionality within a Shadow DOM for isolation. To create a custom element: 1. Define a class extending HTMLElement. 2. Use customElements.define() to register the tag. Example: class MyElement extends HTMLElement { constructor() { super(); const shadow = this.attachShadow({mode: 'open'}); shadow.innerHTML = '<p>Hello, Custom Element!</p>'; } } customElements.define('my-element', MyElement); Then, use <my-element> in your HTML.",

    "What is a pseudo-class ':not()' in CSS?": "The ':not()' pseudo-class selects elements that do not match a given selector. This allows exclusion of specific elements from a selection. Example: div:not(.exclude) { color: blue; } This targets all <div> elements except those with the class 'exclude'.",

    "What is the difference between 'overflow: hidden', 'scroll', 'auto', and 'visible' in CSS?": "'hidden' hides overflow content; the user cannot scroll to view it. 'scroll' always shows scrollbars, regardless of whether content overflows. 'auto' shows scrollbars only if the content overflows the container. 'visible' is the default behavior, where overflow content is visible outside the container.",

    "How does Flexbox differ from Grid Layout in CSS?": "Flexbox is a one-dimensional layout model that arranges items in a row or a column, aligning items along the main axis. It is great for single-row or column layouts. In contrast, Grid Layout is a two-dimensional model, handling both rows and columns simultaneously, making it ideal for more complex layouts.",
    
    "What is the difference between 'static', 'relative', 'absolute', 'fixed', and 'sticky' positioning in CSS?": "'static' is the default position for elements. 'relative' positions an element relative to its original position. 'absolute' positions an element relative to its nearest positioned ancestor (non-static). 'fixed' positions an element relative to the viewport. 'sticky' behaves like 'relative' until it reaches a defined threshold, then behaves like 'fixed' when scrolling.",

    "What are the differences between 'nth-child()' and 'nth-of-type()' pseudo-classes?": "'nth-child()' targets elements based on their position within their parent element, regardless of their type. 'nth-of-type()' targets elements based on their type and position within their parent. Example: div:nth-child(2) selects the second child div, while div:nth-of-type(2) selects the second div among siblings of the same type.",

    "What is the purpose of the 'clip-path' property in CSS?": "The 'clip-path' property is used to create a clipping region, which defines which parts of an element are visible. Example: clip-path: circle(50%); creates a circular clipping region, making the element appear circular.",

    "What is the purpose of the 'will-change' property in CSS?": "The 'will-change' property provides a hint to the browser about upcoming changes to an element. It helps the browser optimize rendering performance by preparing resources ahead of time. Example: will-change: transform;",

    "What is the difference between 'align-items' and 'align-content' in CSS?": "'align-items' aligns the flex items along the cross axis (perpendicular to the main axis) within a flex container. 'align-content' aligns the flex lines (rows or columns) within a flex container when there is extra space.",

    "What are the different data types in JavaScript?": "JavaScript has 7 primitive data types: string, number, boolean, null, undefined, symbol, and bigint. In addition, JavaScript has objects which include arrays, functions, and regular objects.",

    "What is the difference between '==' and '===' in JavaScript?": "'==' (loose equality) performs type coercion, meaning it converts the operands to the same type before comparing them. '===' (strict equality) does not perform type coercion and compares both value and type. Example: '5' == 5 is true, but '5' === 5 is false.",

    "What is a closure in JavaScript?": "A closure is a function that retains access to the variables from its lexical scope (the scope in which it was created) even after it is executed outside that scope. This allows for functions to remember and manipulate data from their creation context.",

    "What is the difference between 'let', 'const', and 'var'?": "'var' has function-level scope and is hoisted to the top of its scope. 'let' and 'const' have block-level scope, and while 'let' allows reassignment, 'const' does not. 'const' creates a constant reference to a value, meaning the variable itself cannot be reassigned.",

    "What is the difference between null and undefined?": "'null' is a value explicitly assigned to a variable, representing no value or empty. 'undefined' means a variable has been declared but has not been assigned a value yet.",

    "What is the purpose of JavaScript's 'this' keyword?": "'this' refers to the object that is executing the current function. Its value depends on how the function is called, and it can change based on the invocation context (e.g., in a method, it refers to the object, and in a regular function, it refers to the global object).",

    "What are JavaScript promises?": "A promise represents the eventual completion or failure of an asynchronous operation and its resulting value. Promises have three states: pending, fulfilled, or rejected. Promises allow chaining and asynchronous error handling.",

    "What is the difference between synchronous and asynchronous programming?": "Synchronous programming executes tasks sequentially, blocking the execution of subsequent tasks until the current task completes. Asynchronous programming allows tasks to run independently, enabling non-blocking operations, using callbacks, promises, or async/await.",

    "What is the difference between 'call', 'apply', and 'bind'?": "'call' invokes a function with a specified 'this' value and arguments provided one by one. 'apply' is similar to 'call', but arguments are passed as an array. 'bind' creates a new function with a specified 'this' value and arguments but does not execute it immediately.",

    "What is the event loop in JavaScript?": "The event loop is a mechanism that manages the execution of multiple code blocks by handling the call stack and the callback queue, ensuring asynchronous code runs in order, even if synchronous tasks are pending.",

    "What is the difference between deep and shallow copy?": "A shallow copy duplicates only the top-level properties of an object, while a deep copy recursively duplicates all nested objects and properties. Shallow copies can be created using Object.assign() or the spread operator, while deep copies can be done using recursion or libraries like Lodash.",

    "What are JavaScript modules?": "Modules are reusable pieces of code that can be imported and exported between different files, promoting better code organization and maintainability. The ES6 module system uses the 'import' and 'export' keywords to define and use modules.",
    "What is the difference between 'map', 'filter', and 'reduce' in JavaScript?": "'map' creates a new array by transforming each element. 'filter' creates a new array with elements that pass a test. 'reduce' applies a function to accumulate array elements into a single value.",
    "What is hoisting in JavaScript?": "Hoisting is JavaScript's behavior of moving declarations (variable and function) to the top of their scope during the compile phase.",
    "What is the purpose of the 'async' and 'await' keywords?": "'async' declares a function as asynchronous, returning a promise. 'await' pauses the execution of an async function until the promise resolves or rejects.",
    "What is the difference between 'undefined' and 'not defined'?": "'undefined' means a variable has been declared but not assigned a value. 'Not defined' occurs when trying to access a variable that hasn't been declared.",
    "What is the difference between 'for...of' and 'for...in' loops?": "'for...of' iterates over iterable objects like arrays and strings. 'for...in' iterates over enumerable properties of an object, including inherited ones.",
    "What is the DOM?": "The DOM (Document Object Model) is a programming interface for web documents. It represents the structure of an HTML or XML document as a tree of objects.",
    "What is the difference between arrow functions and regular functions?": "Arrow functions have a lexical 'this', meaning they inherit 'this' from the surrounding context, while regular functions have their own 'this' based on how they are called.",
    "What is debouncing in JavaScript?": "Debouncing is a technique to limit the execution of a function by delaying its invocation until after a specified delay has passed since the last call.",
    "What is the difference between 'var', 'let', and 'const' in terms of scope and hoisting?": "'var' is function-scoped and hoisted to the top of its scope. 'let' and 'const' are block-scoped, and while they are hoisted, they remain in a temporal dead zone until initialized.",
    "What is the difference between shallow copy and deep copy in JavaScript?": "Shallow copy copies only the top-level properties, while deep copy recursively copies all nested objects. Methods like Object.assign() create shallow copies, whereas libraries like Lodash can perform deep copies.",
    "What is the difference between mutable and immutable data in JavaScript?": "Mutable data can be changed after creation (e.g., objects, arrays). Immutable data cannot be changed after creation, requiring the creation of a new value (e.g., strings, numbers).",
    "What are IIFEs (Immediately Invoked Function Expressions), and why are they used?": "IIFEs are functions that are executed immediately after their definition. They are used to create private scopes and avoid polluting the global namespace.",
    "What is the difference between '==' and '===' in JavaScript?": "'==' compares values with type coercion, allowing different types to be considered equal. '===' compares both value and type, enforcing strict equality.",
    "What are higher-order functions in JavaScript?": "Higher-order functions are functions that can accept other functions as arguments or return functions as results. Examples include map(), filter(), and reduce().",
    "What is the difference between 'undefined' and 'not defined' in JavaScript?": "'undefined' means a variable has been declared but not assigned a value. 'Not defined' occurs when trying to access a variable that hasn't been declared.",
    "What is the difference between synchronous and asynchronous JavaScript?": "Synchronous JavaScript executes one task at a time, blocking further execution until the current task completes. Asynchronous JavaScript allows tasks to run independently, often using callbacks, promises, or async/await.",
    "What are JavaScript generators?": "Generators are functions that can be paused and resumed using the 'function*' syntax. They yield multiple values using the 'yield' keyword and are iterators by nature.",
    "What is the difference between 'apply', 'call', and 'bind'?": "'apply' invokes a function with an array of arguments. 'call' invokes a function with arguments provided one by one. 'bind' creates a new function with a specified 'this' value and arguments, but doesn't call it immediately.",
    "What is the difference between 'null' and 'undefined'?": "'null' is an intentional assignment of no value, while 'undefined' indicates a variable has been declared but not initialized.",

    "What is event delegation in JavaScript?": "Event delegation is a technique where a parent element listens for events on its child elements using event bubbling. It improves performance and simplifies code.",
    "What is the purpose of 'use strict' in JavaScript?": "'use strict' enforces stricter parsing and error handling, preventing the use of undeclared variables and unsafe actions.",
    "What are JavaScript promises?": "Promises represent the eventual completion or failure of an asynchronous operation. They can be in one of three states: pending, resolved, or rejected.",
    "What is the purpose of the 'typeof' operator in JavaScript?": "'typeof' is used to determine the type of a variable or expression, returning values like 'string', 'number', 'boolean', 'undefined', 'object', or 'function'.",
    "What are modules in JavaScript?": "Modules allow developers to encapsulate and reuse code by exporting and importing functionality between files. Common module formats are ES6 modules and CommonJS.",
    "What are prototypes in JavaScript?": "Prototypes are objects from which other objects inherit properties and methods. Every JavaScript object has an internal [[Prototype]] pointing to its prototype object.",
    "What is the difference between the call stack and the event loop?": "The call stack is a data structure that tracks function calls, while the event loop handles the execution of asynchronous tasks by moving callbacks from the queue to the stack.",
    "What is the difference between 'fetch' and 'XMLHttpRequest'?": "'fetch' is a modern API for making HTTP requests that returns a promise and has a cleaner syntax. 'XMLHttpRequest' is an older API with more verbose syntax.",
    "What is memoization in JavaScript?": "Memoization is a performance optimization technique that caches the results of expensive function calls to avoid redundant calculations for the same inputs.",
    "What are weak references in JavaScript?": "Weak references are references that do not prevent an object from being garbage-collected. WeakMap and WeakSet are collections that use weak references.",
    "What is the purpose of the 'Symbol' data type in JavaScript?": "'Symbol' is a primitive data type that creates unique identifiers, often used to prevent naming collisions in object properties.",
    "What is the difference between function declaration and function expression?": "Function declarations are hoisted and can be used before they are defined. Function expressions are not hoisted and are only accessible after their definition.",
    "What is currying in JavaScript?": "Currying is the process of transforming a function with multiple arguments into a sequence of functions that each take a single argument.",
    "What is throttling in JavaScript?": "Throttling limits the execution of a function to once every specified period, regardless of how often the function is triggered.",
    "What are the different ways to create objects in JavaScript?": "Objects can be created using object literals, the Object constructor, ES6 classes, Object.create(), and functions acting as constructors.",
    "What is the prototype chain in JavaScript?": "The prototype chain is a mechanism through which objects inherit properties and methods from other objects. Each object has an internal [[Prototype]] link to its parent object, creating a chain.",
    "What is the difference between Object.freeze() and Object.seal()?": "Object.freeze() makes an object immutable, preventing changes to properties or their values. Object.seal() allows modification of existing properties but prevents adding or deleting properties.",
    "What is the difference between spread operator and rest operator in JavaScript?": "The spread operator (...) expands iterable elements into individual arguments or elements. The rest operator collects multiple arguments into a single array.",
    "What is the difference between 'instanceof' and 'typeof'?": "'instanceof' checks if an object is an instance of a specific class or constructor. 'typeof' determines the type of a variable or value.",
    "What are JavaScript mixins, and how are they implemented?": "Mixins are reusable pieces of code that can be included in multiple classes or objects. They are implemented by copying properties and methods into the target object.",
    "What are asynchronous iterators in JavaScript?": "Asynchronous iterators use the 'for await...of' syntax to iterate over data streams or asynchronous sources.",
    "What is the difference between ES5 and ES6?": "ES6 introduced new features like arrow functions, classes, template literals, destructuring, default parameters, let/const, modules, promises, and more, enhancing JavaScript's capabilities and syntax.",
    "What is destructuring in JavaScript?": "Destructuring is a syntax for extracting values from arrays or properties from objects into distinct variables. Example: const {name, age} = person;",
    "What are tagged templates in JavaScript?": "Tagged templates allow you to customize string interpolation by processing template literals with a function. Example: tagged`Hello ${name}!`;",
    "What is the difference between call stack and memory heap in JavaScript?": "The call stack manages function calls and execution order. The memory heap stores objects and variables dynamically allocated during execution.",
    "What is tail call optimization in JavaScript?": "Tail call optimization is a feature where the last function call in a function is optimized to prevent additional stack frames, improving performance for recursive functions.",
    "What is the difference between Object.assign() and spread operator?": "Object.assign() copies properties from source objects to a target object. The spread operator also copies properties but provides a cleaner and shorter syntax.",
    "What is the purpose of async/await?": "Async/await simplifies working with promises, allowing asynchronous code to be written in a synchronous style. 'async' marks a function as asynchronous, and 'await' pauses execution until the promise resolves.",
    "What is the purpose of the Reflect API in JavaScript?": "The Reflect API provides methods to interact with objects, like getting, setting, or defining properties. It complements the Proxy object and simplifies meta-programming.",
    "What is a Proxy in JavaScript?": "A Proxy is an object that wraps another object or function, intercepting operations like property access, assignment, or function invocation.",
    "What is event propagation in JavaScript?": "Event propagation determines the order in which event handlers are called. It includes three phases: capturing (down), target, and bubbling (up).",
    "What is the difference between WeakMap and Map?": "WeakMap keys must be objects, and they allow garbage collection of keys when there are no other references. Map keys can be any type and do not support garbage collection.",
    "What are function generators in JavaScript?": "Function generators use the 'function*' syntax to create functions that can pause execution and resume later using 'yield' and 'next()' calls.",
    "What is the purpose of setTimeout() and setInterval()?": "setTimeout() executes a function after a delay, while setInterval() repeatedly executes a function at specified intervals.",
    "What is the difference between synchronous and asynchronous iterables in JavaScript?": "Synchronous iterables use a 'for...of' loop and produce data immediately. Asynchronous iterables use 'for await...of' and produce data over time.",
    "What is dynamic typing in JavaScript?": "Dynamic typing means variables are not bound to a specific data type and can hold values of any type, changing dynamically during runtime.",
    "What is the difference between debounce and throttle?": "Debounce delays execution until a specified time has passed since the last invocation. Throttle limits execution to a fixed rate, ensuring it runs at regular intervals.",
    "What are Transpilers in JavaScript?": "Transpilers like Babel convert modern JavaScript (ES6+) into older versions for compatibility with environments that do not support the latest features.",
    "What are promises chaining and error handling in JavaScript?": "Promise chaining allows multiple asynchronous tasks to be executed in sequence. Error handling ensures rejections are caught and managed using .catch() or try-catch blocks with async/await.",
    "introduction":"Hello! My name is [Your Name]For the past five years, I've been dedicated to crafting user-friendly and visually appealing web applications as a front-end developer. My primary focus has been on utilizing React.js to build interactive and dynamic user interfaces.I have a strong understanding of HTML, CSS, and JavaScript, which are the building blocks of web development. With React.js, I've been able to create reusable components, manage state efficiently, and ensure high performance in web applications.Throughout my career, I've worked on various projects where I've collaborated closely with designers and backend developers to turn concepts into reality. I'm experienced in translating design mockups into responsive and pixel-perfect layouts, ensuring a seamless user experience across different devices and screen sizes.Additionally, I'm familiar with modern front-end development tools and technologies such as Redux, Webpack, and CSS preprocessors like Sass.I'm always eager to stay updated with the latest trends and best practices in front-end development to deliver the best possible solutions."


}