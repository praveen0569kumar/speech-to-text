
export const data1 = {
    "What is React.js? Why is it used?": "React.js is a JavaScript library developed by Facebook for building user interfaces. It is used to create fast, scalable, and dynamic web applications using components and efficient rendering with a virtual DOM.",
    "What are the major features of React?": "JSX (JavaScript XML), Virtual DOM, Component-based architecture, Unidirectional data flow, React Hooks, High performance through reconciliation.",
    "What is the Virtual DOM, and how does it work in React?": "The Virtual DOM is a lightweight copy of the real DOM. React updates the Virtual DOM first, calculates the difference (diffing), and efficiently updates only the changed elements in the real DOM.",
    "What is JSX, and why is it used?": "JSX is a syntax extension for JavaScript that allows you to write HTML-like code within JavaScript. It makes the code more readable and allows React components to render UI elements efficiently.",
    "Explain the difference between functional and class components.": "Functional components are stateless and defined as plain JavaScript functions. They can use React Hooks for state and lifecycle methods. Class components are ES6 classes and include state and lifecycle methods by default.",
    "What are props in React? How are they different from state?": "Props are inputs to components that allow data to be passed from parent to child. State is managed within a component and can be modified by the component itself.",
    "What is the purpose of the key attribute in React lists?": "The key attribute helps React identify which items have changed, been added, or removed. It improves the performance of rendering lists.",
    "What are fragments in React? Why are they used?": "Fragments allow grouping multiple elements without adding an extra DOM node. They are useful for returning multiple children from a component.",
    "Explain the React lifecycle methods (used in class components).": "Mounting: componentDidMount; Updating: componentDidUpdate; Unmounting: componentWillUnmount; Error handling: componentDidCatch.",
    "How does React handle events differently than vanilla JavaScript?": "React uses Synthetic Events, which are cross-browser wrappers for native events. It provides consistent behavior across browsers.",
    "What is the purpose of React hooks? Name a few commonly used hooks.": "Hooks allow functional components to use state and lifecycle features. Common hooks include useState, useEffect, useContext, useReducer, and useRef.",
    "How do useState and useEffect work? Provide examples.": "useState initializes and updates state. Example: const [count, setCount] = useState(0). useEffect performs side effects like fetching data. Example: useEffect(() => { document.title = Count: ${count}; }, [count]).",
    "What is the difference between useMemo and useCallback?": "useMemo memoizes the result of a function. useCallback memoizes the function itself to avoid re-creation on re-renders.",
    "Explain the Context API and how it helps in state management.": "The Context API provides a way to share state across components without passing props down manually. It simplifies managing global state.",
    "What is Redux, and how is it integrated with React?": "Redux is a state management library. It is integrated with React using the react-redux library through Provider, connect, or hooks like useSelector and useDispatch.",
    "What are higher-order components (HOCs), and when would you use them?": "HOCs are functions that take a component and return a new component. They are used for cross-cutting concerns like authentication or logging.",
    "Explain the difference between controlled and uncontrolled components.": "Controlled components have state managed by React (e.g., value in input). Uncontrolled components rely on DOM for their state (e.g., ref).",
    "What are React portals, and when should they be used?": "Portals render children into a DOM node outside the parent component's DOM hierarchy. Useful for modals or tooltips.",
    "How does React optimize performance with reconciliation?": "React uses the Virtual DOM to diff changes and updates only the affected parts of the real DOM.",
    "What are the benefits and drawbacks of using React.lazy and Suspense?": "Benefits: Code splitting and lazy loading improve performance. Drawbacks: Requires fallback components and doesn’t work with server-side rendering (SSR).",
    "What is React Router, and why is it used?": "React Router is a library for routing in React apps. It enables navigation without reloading the page.",
    "Explain the difference between  and .": " uses clean URLs and the History API.  uses a hash (#) in the URL and is better suited for older browsers.",
    "How do you implement dynamic routing in React?": "Use useParams to capture route parameters:",
    "What is the difference between useNavigate and useHistory in React Router?": "useNavigate is used in React Router v6 for navigation. useHistory is used in older versions.",
    "How do you implement route guards in React?": "Use Navigate for conditional routing: const isAuthenticated = true; return isAuthenticated ?  : <Navigate to=",
    "What is the difference between local state and global state?": "Local state is managed within a component. Global state is shared across components using Context API or Redux.",
    "How does the Context API differ from Redux?": "Context API is simpler and built into React, ideal for small apps. Redux is more robust and suited for complex state management.",
    "Explain the Redux data flow (actions, reducers, and store).": "Actions describe changes, reducers handle state updates, and the store manages the entire state tree.",
    "What is the purpose of useReducer, and how is it different from useState?": "useReducer is suited for complex state logic, while useState is simpler and better for straightforward state updates.",
    "How do you handle asynchronous actions in Redux?": "Use middleware like redux-thunk or redux-saga.",
    "How do you test a React component?": "Use tools like Jest and React Testing Library for unit and integration testing.",
    "What is the purpose of Jest and React Testing Library?": "Jest is a testing framework. React Testing Library focuses on testing UI interactions.",
    "How do you simulate user interactions in a test case?": "Use fireEvent or userEvent from React Testing Library.",
    "Explain snapshot testing in React.": "Snapshot testing compares a rendered component’s output to a saved snapshot file.",
    "What are mock functions, and why are they used in testing React apps?": "Mock functions simulate external dependencies to isolate and test a component’s behavior.",
    "What are some common performance bottlenecks in React applications?": "Unnecessary re-renders, large bundle sizes, and poor use of state management.",
    "How does React.memo work, and when should it be used?": "React.memo prevents re-renders of functional components if props don’t change.",
    "What are the benefits of lazy loading components in React?": "Improves initial load time by loading components only when needed.",
    "Explain how shouldComponentUpdate works in class components.": "It determines if a component should re-render based on state or prop changes.",
    "What is the difference between HTML5 and previous versions of HTML?": "HTML5 introduced new semantic elements like <article>, <section>, <nav>, and <aside>, support for multimedia (audio and video tags), APIs like localStorage, WebSockets, and improved form controls. It also deprecated some older elements and attributes.",
  "How do you optimize the performance of a web page using HTML?": "Use techniques like minifying HTML, using async and defer attributes for scripts, optimizing image sizes and formats, using semantic HTML for accessibility, and reducing the number of HTTP requests.",
  "Explain the concept of ARIA (Accessible Rich Internet Applications) in HTML.": "ARIA is a set of attributes that enhance accessibility by providing additional information to assistive technologies. Examples include roles like 'button', 'alert', and properties like 'aria-label' and 'aria-hidden'.",
  "What are the differences between relative, absolute, fixed, and sticky positioning in CSS?": "Relative positioning positions an element relative to its normal position. Absolute positions it relative to the nearest positioned ancestor. Fixed positions it relative to the viewport. Sticky toggles between relative and fixed based on scroll position.",
  "What is the difference between 'em', 'rem', 'px', and '%' units in CSS?": "'em' is relative to the font size of the parent element. 'rem' is relative to the root element's font size. 'px' is an absolute unit. '%' is relative to the parent element's dimensions.",
  "What are CSS preprocessors? Name some popular ones.": "CSS preprocessors extend CSS with variables, nested rules, and functions, making CSS more maintainable and reusable. Popular examples are Sass, LESS, and Stylus.",
  "Explain the CSS box model and its components.": "The CSS box model includes content, padding, border, and margin. Content is the innermost part, padding surrounds the content, borders wrap the padding, and margins create space between the element and its surroundings.",
  "What are custom data attributes in HTML, and how are they used?": "Custom data attributes start with 'data-' and store custom data on an HTML element. Example: <div data-id='123'></div>. These can be accessed via JavaScript using 'dataset'.",
  "What is the difference between 'inline', 'block', 'inline-block', and 'flex' in CSS?": "'Inline' elements do not start on a new line and take up as much width as necessary. 'Block' elements start on a new line and take the full width. 'Inline-block' combines features of both. 'Flex' allows flexible item positioning within a container.",
  "What are pseudo-classes and pseudo-elements in CSS? Provide examples.": "Pseudo-classes define the state of an element (e.g., :hover, :nth-child()). Pseudo-elements style specific parts of an element (e.g., ::before, ::after). Example: p::first-line.",
  "What is the difference between 'relative', 'absolute', and 'fixed' units in CSS?": "Relative units (e.g., em, %) depend on the parent element or viewport. Absolute units (e.g., px, cm) are fixed sizes regardless of parent dimensions.",
  "How do you implement lazy loading for images in HTML?": "Use the 'loading' attribute with the value 'lazy' on the <img> tag. Example: <img src='image.jpg' loading='lazy' alt='Description'>.",
  "What is the difference between 'visibility: hidden' and 'display: none'?": "'Visibility: hidden' hides the element but still takes up space in the layout. 'Display: none' removes the element from the layout entirely.",
  "What is a CSS grid, and how does it differ from Flexbox?": "CSS Grid is a two-dimensional layout system for managing rows and columns, while Flexbox is one-dimensional and focuses on either rows or columns.",
  "What are Web Components, and how are they implemented?": "Web Components are reusable custom elements using HTML, CSS, and JavaScript. They are implemented using Shadow DOM, Custom Elements, and HTML templates.",
  "What is HTML and why is it used?": "HTML (HyperText Markup Language) is the standard markup language used to create and design web pages. It structures the content on the web and supports multimedia elements like text, images, and videos.",
  "What is the difference between <div> and <span> elements?": "<div> is a block-level container used to group elements for styling or layout, whereas <span> is an inline container used for styling parts of text or inline elements.",
  "What are semantic HTML elements? Provide examples.": "Semantic HTML elements clearly define their purpose and improve code readability. Examples include <header>, <footer>, <article>, <section>, and <aside>.",
  "How does the <meta> tag work in HTML?": "<meta> provides metadata about the HTML document, such as character encoding, viewport settings, or SEO-related information like description and keywords.",
  "What is the purpose of the 'doctype' declaration?": "The 'doctype' declaration specifies the HTML version being used and helps the browser render the page correctly. Example: <!DOCTYPE html> for HTML5.",
  "What is the difference between id and class attributes in HTML?": "The 'id' attribute uniquely identifies an element, while the 'class' attribute groups multiple elements for styling or scripting.",
  "What is the difference between inline, block, and inline-block elements?": "Inline elements do not start on a new line and only take up as much width as necessary. Block elements start on a new line and take up the full width available. Inline-block elements behave like inline elements but allow setting width and height.",
  "How can you include JavaScript in an HTML document?": "JavaScript can be included in an HTML document using the <script> tag. It can be embedded directly within the HTML or linked as an external file.",
  "What are the global attributes in HTML?": "Global attributes are attributes that can be used on any HTML element. Examples include 'id', 'class', 'style', 'data-*', and 'tabindex'.",
  "What is the difference between <link> and <a> tags in HTML?": "<link> is used to link external resources, like CSS files, to an HTML document. <a> creates hyperlinks to navigate between web pages or resources.",
  "What is the difference between relative, absolute, fixed, and sticky positioning in CSS?": "Relative positions an element relative to its normal position. Absolute positions it relative to the nearest positioned ancestor. Fixed positions it relative to the viewport. Sticky toggles between relative and fixed based on scroll position.",
  "What is the difference between 'em', 'rem', 'px', and '%' units in CSS?": "'em' is relative to the font size of the parent element. 'rem' is relative to the root element's font size. 'px' is an absolute unit. '%' is relative to the parent element's dimensions.",
  "What are pseudo-classes and pseudo-elements in CSS? Provide examples.": "Pseudo-classes define the state of an element (e.g., :hover, :nth-child()). Pseudo-elements style specific parts of an element (e.g., ::before, ::after). Example: p::first-line.",
  "What are CSS media queries, and how are they used?": "CSS media queries are used to apply different styles based on device characteristics like screen size, resolution, or orientation. Example: @media (max-width: 600px) { body { font-size: 14px; } }.",
  "What is the difference between 'inline', 'block', 'inline-block', and 'flex' in CSS?": "'Inline' elements do not start on a new line and take up as much width as necessary. 'Block' elements start on a new line and take the full width. 'Inline-block' combines features of both. 'Flex' allows flexible item positioning within a container.",
  "How does the z-index property work in CSS?": "z-index controls the stack order of elements. Higher z-index values are displayed in front of lower ones. It only works on positioned elements (relative, absolute, fixed).",
  "What is the difference between 'visibility: hidden' and 'display: none'?": "'Visibility: hidden' hides the element but still takes up space in the layout. 'Display: none' removes the element from the layout entirely.",
  "What are the different types of CSS?": "There are three types of CSS: Inline CSS (applied directly to an element via the 'style' attribute), Internal CSS (written inside a <style> tag in the HTML head), and External CSS (written in a separate file and linked via <link> tags).",
  "What is the difference between relative and absolute units in CSS?": "Relative units (e.g., %, em, rem) depend on the parent element or viewport, while absolute units (e.g., px, cm) define a fixed size regardless of context.",
  "How do you optimize CSS for performance?": "Techniques include minifying CSS files, combining multiple files, using efficient selectors, avoiding inline CSS, and implementing lazy loading for large assets.",
  "What is the difference between a 'relative path' and an 'absolute path' in HTML?": "A relative path is relative to the current document's location, while an absolute path specifies the full URL or file location starting from the root.",
  "What are the new input types introduced in HTML5?": "HTML5 introduced new input types like 'email', 'url', 'number', 'range', 'date', 'datetime-local', 'month', 'week', 'time', 'color', and 'search'.",
  "What is the purpose of the <fieldset> and <legend> elements in HTML forms?": "<fieldset> groups related form elements, and <legend> provides a title or description for the group.",
  "What is the difference between SVG and Canvas in HTML?": "SVG (Scalable Vector Graphics) is an XML-based vector image format, ideal for scalable graphics. Canvas is a pixel-based graphics API, suitable for dynamic, real-time rendering like games.",
  "How do you handle responsive images in HTML?": "Use the <picture> element, the 'srcset' attribute, or CSS media queries to deliver images optimized for different screen sizes or resolutions.",
  "What are custom elements in HTML, and how are they created?": "Custom elements are user-defined HTML elements created using JavaScript. They are defined using the Custom Elements API and can include a Shadow DOM for encapsulation.",
  "What are the differences between 'localStorage', 'sessionStorage', and 'cookies'?": "localStorage stores data with no expiration, sessionStorage stores data for the session's duration, and cookies store small amounts of data that can be sent to the server with requests.",
  "What is a pseudo-class ':not()' in CSS?": "The ':not()' pseudo-class excludes elements that match a specified selector. Example: div:not(.exclude) selects all <div> elements except those with the 'exclude' class.",
  "What is the difference between 'overflow: hidden', 'scroll', 'auto', and 'visible' in CSS?": "'hidden' hides overflow content, 'scroll' adds scrollbars regardless of content size, 'auto' adds scrollbars only if content overflows, and 'visible' allows overflow content to be displayed.",
  "How does Flexbox differ from Grid Layout in CSS?": "Flexbox is one-dimensional, aligning items in rows or columns, while Grid Layout is two-dimensional, managing both rows and columns simultaneously.",
  "What is the difference between CSS transitions and CSS animations?": "CSS transitions apply changes between states smoothly over time. CSS animations allow complex keyframe-based animations for more control.",
  "What are CSS variables, and how are they used?": "CSS variables (custom properties) are defined using '--' in a :root selector or any other scope and referenced with 'var()'. Example: --main-color: blue; color: var(--main-color);.",
  "What is the purpose of the 'clip-path' property in CSS?": "The 'clip-path' property is used to create a clipping region, defining which parts of an element are visible. Example: clip-path: circle(50%);.",
  "What is the purpose of the 'will-change' property in CSS?": "The 'will-change' property hints to the browser about the expected changes to an element, improving rendering performance for animations or transitions.",
  "What is the difference between 'static', 'relative', 'absolute', 'fixed', and 'sticky' positioning in CSS?": "'Static' is the default position. 'Relative' offsets an element relative to its original position. 'Absolute' positions it relative to its nearest positioned ancestor. 'Fixed' positions it relative to the viewport. 'Sticky' toggles between relative and fixed based on scroll position.",
  "What are the differences between CSS Grid's 'fr' unit and other units?": "'fr' represents a fraction of the available space within a grid container, while other units like 'px', '%', or 'em' are based on fixed or relative measurements.",
  "What is the purpose of the 'object-fit' property in CSS?": "The 'object-fit' property defines how content like images or videos should be resized to fit their container. Example values include 'cover', 'contain', and 'fill'.",
  "What are the differences between 'nth-child()' and 'nth-of-type()' pseudo-classes?": "'nth-child()' selects elements based on their position within their parent, regardless of type. 'nth-of-type()' selects elements based on their type and position.",
  "How do you implement a sticky footer using CSS?": "To implement a sticky footer, ensure the body and html have height: 100%, and the main content has min-height: calc(100% - footer height).",
  "What is the difference between the CSS properties 'align-items' and 'align-content'?": "'align-items' aligns items along the cross-axis of a flex container. 'align-content' aligns the flex lines within a flex container when there is extra space.",
  "What are the different data types in JavaScript?": "JavaScript has 7 primitive data types: string, number, boolean, null, undefined, symbol, and bigint. It also has objects, which include arrays, functions, and regular objects.",
  "What is the difference between '==' and '===' in JavaScript?": "'==' performs type coercion before comparison, meaning different types can be considered equal. '===' (strict equality) checks for both value and type equality without type coercion.",
  "What is a closure in JavaScript?": "A closure is a function that remembers the variables from its lexical scope, even when the function is executed outside that scope.",
  "What is the difference between 'let', 'const', and 'var'?": "'var' has function scope, while 'let' and 'const' have block scope. 'const' is used for variables that shouldn't be reassigned, while 'let' allows reassignment.",
  "What is the difference between null and undefined?": "'null' is an assigned value representing no value, while 'undefined' means a variable has been declared but not assigned a value.",
  "What is the purpose of JavaScript's 'this' keyword?": "'this' refers to the object that is executing the current function. Its value depends on the function's invocation context.",
  "What are JavaScript promises?": "Promises represent the eventual completion (or failure) of an asynchronous operation and its resulting value. They can be in one of three states: pending, fulfilled, or rejected.",
  "What is the difference between synchronous and asynchronous programming?": "Synchronous programming executes tasks sequentially, blocking the execution of subsequent tasks. Asynchronous programming allows tasks to run independently, using callbacks, promises, or async/await.",
  "What is the difference between 'call', 'apply', and 'bind'?": "'call' invokes a function with a specified 'this' value and arguments individually. 'apply' is similar but takes arguments as an array. 'bind' creates a new function with a specified 'this' value but does not execute it immediately.",
  "What is the event loop in JavaScript?": "The event loop is a mechanism that manages the execution of multiple code blocks by handling the call stack and the callback queue, ensuring asynchronous code runs in order.",
  "What is the difference between deep and shallow copy?": "A shallow copy duplicates only the top-level properties of an object, while a deep copy recursively copies all nested objects and properties.",
  "What are JavaScript modules?": "Modules are reusable pieces of code that can be imported and exported between files. They enable better organization and maintainability.",
  "What is the difference between 'map', 'filter', and 'reduce' in JavaScript?": "'map' creates a new array by transforming each element. 'filter' creates a new array with elements that pass a test. 'reduce' applies a function to accumulate array elements into a single value.",
  "What is hoisting in JavaScript?": "Hoisting is JavaScript's behavior of moving declarations (variable and function) to the top of their scope during the compile phase.",
  "What is the purpose of the 'async' and 'await' keywords?": "'async' declares a function as asynchronous, returning a promise. 'await' pauses the execution of an async function until the promise resolves or rejects.",
  "What is the difference between 'undefined' and 'not defined'?": "'undefined' means a variable has been declared but not assigned a value. 'Not defined' occurs when trying to access a variable that hasn't been declared.",
  "What is the difference between 'for...of' and 'for...in' loops?": "'for...of' iterates over iterable objects like arrays and strings. 'for...in' iterates over enumerable properties of an object, including inherited ones.",
  "What is the DOM?": "The DOM (Document Object Model) is a programming interface for web documents. It represents the structure of an HTML or XML document as a tree of objects.",
  "What is the difference between arrow functions and regular functions?": "Arrow functions have a lexical 'this', meaning they inherit 'this' from the surrounding context, while regular functions have their own 'this' based on how they are called.",
  "What is debouncing in JavaScript?": "Debouncing is a technique to limit the execution of a function by delaying its invocation until after a specified delay has passed since the last call.",
  "What is the difference between 'var', 'let', and 'const' in terms of scope and hoisting?": "'var' is function-scoped and hoisted to the top of its scope. 'let' and 'const' are block-scoped, and while they are hoisted, they remain in a temporal dead zone until initialized.",
  "What is the difference between shallow copy and deep copy in JavaScript?": "Shallow copy copies only the top-level properties, while deep copy recursively copies all nested objects. Methods like Object.assign() create shallow copies, whereas libraries like Lodash can perform deep copies.",
  "What is the difference between mutable and immutable data in JavaScript?": "Mutable data can be changed after creation (e.g., objects, arrays). Immutable data cannot be changed after creation, requiring the creation of a new value (e.g., strings, numbers).",
  "What are IIFEs (Immediately Invoked Function Expressions), and why are they used?": "IIFEs are functions that are executed immediately after their definition. They are used to create private scopes and avoid polluting the global namespace.",
  "What is the difference between '==' and '===' in JavaScript?": "'==' compares values with type coercion, allowing different types to be considered equal. '===' compares both value and type, enforcing strict equality.",
  "What are higher-order functions in JavaScript?": "Higher-order functions are functions that can accept other functions as arguments or return functions as results. Examples include map(), filter(), and reduce().",
  "What is the difference between 'undefined' and 'not defined' in JavaScript?": "'undefined' means a variable has been declared but not assigned a value. 'Not defined' occurs when trying to access a variable that hasn't been declared.",
  "What is the difference between synchronous and asynchronous JavaScript?": "Synchronous JavaScript executes one task at a time, blocking further execution until the current task completes. Asynchronous JavaScript allows tasks to run independently, often using callbacks, promises, or async/await.",
  "What are JavaScript generators?": "Generators are functions that can be paused and resumed using the 'function*' syntax. They yield multiple values using the 'yield' keyword and are iterators by nature.",
  "What is the difference between 'apply', 'call', and 'bind'?": "'apply' invokes a function with an array of arguments. 'call' invokes a function with arguments provided one by one. 'bind' creates a new function with a specified 'this' value and arguments, but doesn't call it immediately.",
  "What is the difference between 'null' and 'undefined'?": "'null' is an intentional assignment of no value, while 'undefined' indicates a variable has been declared but not initialized.",
  "What is event delegation in JavaScript?": "Event delegation is a technique where a parent element listens for events on its child elements using event bubbling. It improves performance and simplifies code.",
  "What is the purpose of 'use strict' in JavaScript?": "'use strict' enforces stricter parsing and error handling, preventing the use of undeclared variables and unsafe actions.",
  "What are JavaScript promises?": "Promises represent the eventual completion or failure of an asynchronous operation. They can be in one of three states: pending, resolved, or rejected.",
  "What is the purpose of the 'typeof' operator in JavaScript?": "'typeof' is used to determine the type of a variable or expression, returning values like 'string', 'number', 'boolean', 'undefined', 'object', or 'function'.",
  "What are modules in JavaScript?": "Modules allow developers to encapsulate and reuse code by exporting and importing functionality between files. Common module formats are ES6 modules and CommonJS.",
  "What are prototypes in JavaScript?": "Prototypes are objects from which other objects inherit properties and methods. Every JavaScript object has an internal [[Prototype]] pointing to its prototype object.",
  "What is the difference between the call stack and the event loop?": "The call stack is a data structure that tracks function calls, while the event loop handles the execution of asynchronous tasks by moving callbacks from the queue to the stack.",
  "What is the difference between 'fetch' and 'XMLHttpRequest'?": "'fetch' is a modern API for making HTTP requests that returns a promise and has a cleaner syntax. 'XMLHttpRequest' is an older API with more verbose syntax.",
  "What is memoization in JavaScript?": "Memoization is a performance optimization technique that caches the results of expensive function calls to avoid redundant calculations for the same inputs.",
  "What are weak references in JavaScript?": "Weak references are references that do not prevent an object from being garbage-collected. WeakMap and WeakSet are collections that use weak references.",
  "What is the purpose of the 'Symbol' data type in JavaScript?": "'Symbol' is a primitive data type that creates unique identifiers, often used to prevent naming collisions in object properties.",
  "What is the difference between function declaration and function expression?": "Function declarations are hoisted and can be used before they are defined. Function expressions are not hoisted and are only accessible after their definition.",
  "What is currying in JavaScript?": "Currying is the process of transforming a function with multiple arguments into a sequence of functions that each take a single argument.",
  "What is throttling in JavaScript?": "Throttling limits the execution of a function to once every specified period, regardless of how often the function is triggered.",
  "What are the different ways to create objects in JavaScript?": "Objects can be created using object literals, the Object constructor, ES6 classes, Object.create(), and functions acting as constructors.",
  "What is the prototype chain in JavaScript?": "The prototype chain is a mechanism through which objects inherit properties and methods from other objects. Each object has an internal [[Prototype]] link to its parent object, creating a chain.",
  "What is the difference between Object.freeze() and Object.seal()?": "Object.freeze() makes an object immutable, preventing changes to properties or their values. Object.seal() allows modification of existing properties but prevents adding or deleting properties.",
  "What is the difference between spread operator and rest operator in JavaScript?": "The spread operator (...) expands iterable elements into individual arguments or elements. The rest operator collects multiple arguments into a single array.",
  "What is the difference between 'instanceof' and 'typeof'?": "'instanceof' checks if an object is an instance of a specific class or constructor. 'typeof' determines the type of a variable or value.",
  "What are JavaScript mixins, and how are they implemented?": "Mixins are reusable pieces of code that can be included in multiple classes or objects. They are implemented by copying properties and methods into the target object.",
  "What are asynchronous iterators in JavaScript?": "Asynchronous iterators use the 'for await...of' syntax to iterate over data streams or asynchronous sources.",
  "What is the difference between ES5 and ES6?": "ES6 introduced new features like arrow functions, classes, template literals, destructuring, default parameters, let/const, modules, promises, and more, enhancing JavaScript's capabilities and syntax.",
  "What is destructuring in JavaScript?": "Destructuring is a syntax for extracting values from arrays or properties from objects into distinct variables. Example: const {name, age} = person;",
  "What are tagged templates in JavaScript?": "Tagged templates allow you to customize string interpolation by processing template literals with a function. Example: tagged`Hello ${name}!`;",
  "What is the difference between call stack and memory heap in JavaScript?": "The call stack manages function calls and execution order. The memory heap stores objects and variables dynamically allocated during execution.",
  "What is tail call optimization in JavaScript?": "Tail call optimization is a feature where the last function call in a function is optimized to prevent additional stack frames, improving performance for recursive functions.",
  "What is the difference between Object.assign() and spread operator?": "Object.assign() copies properties from source objects to a target object. The spread operator also copies properties but provides a cleaner and shorter syntax.",
  "What is the purpose of async/await?": "Async/await simplifies working with promises, allowing asynchronous code to be written in a synchronous style. 'async' marks a function as asynchronous, and 'await' pauses execution until the promise resolves.",
  "What is the purpose of the Reflect API in JavaScript?": "The Reflect API provides methods to interact with objects, like getting, setting, or defining properties. It complements the Proxy object and simplifies meta-programming.",
  "What is a Proxy in JavaScript?": "A Proxy is an object that wraps another object or function, intercepting operations like property access, assignment, or function invocation.",
  "What is event propagation in JavaScript?": "Event propagation determines the order in which event handlers are called. It includes three phases: capturing (down), target, and bubbling (up).",
  "What is the difference between WeakMap and Map?": "WeakMap keys must be objects, and they allow garbage collection of keys when there are no other references. Map keys can be any type and do not support garbage collection.",
  "What are function generators in JavaScript?": "Function generators use the 'function*' syntax to create functions that can pause execution and resume later using 'yield' and 'next()' calls.",
  "What is the purpose of setTimeout() and setInterval()?": "setTimeout() executes a function after a delay, while setInterval() repeatedly executes a function at specified intervals.",
  "What is the difference between synchronous and asynchronous iterables in JavaScript?": "Synchronous iterables use a 'for...of' loop and produce data immediately. Asynchronous iterables use 'for await...of' and produce data over time.",
  "What is dynamic typing in JavaScript?": "Dynamic typing means variables are not bound to a specific data type and can hold values of any type, changing dynamically during runtime.",
  "What is the difference between debounce and throttle?": "Debounce delays execution until a specified time has passed since the last invocation. Throttle limits execution to a fixed rate, ensuring it runs at regular intervals.",
  "What are Transpilers in JavaScript?": "Transpilers like Babel convert modern JavaScript (ES6+) into older versions for compatibility with environments that do not support the latest features.",
  "What are promises chaining and error handling in JavaScript?": "Promise chaining allows multiple asynchronous tasks to be executed in sequence. Error handling ensures rejections are caught and managed using .catch() or try-catch blocks with async/await."

    }